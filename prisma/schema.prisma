generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "postgresql"
    url          = env("DATABASE_URL")
    directUrl    = env("cmplt__URL_NON_POOLING")
    relationMode = "prisma"
}

model Community {
    id          String   @id @default(cuid())
    name        String   @unique
    description String
    imageUrl    String?
    admin       String
    createdAt   DateTime @default(now())

    ratings Rating[]
    reviews Review[]
}

model Rating {
    userId      String
    communityId String
    value       Int        @default(0)
    createdAt   DateTime   @default(now())
    user        User?      @relation(fields: [userId], references: [id])
    community   Community? @relation(fields: [communityId], references: [id])

    @@id([userId, communityId])
    @@index([userId])
    @@index([communityId])
}

model Review {
    userId      String
    communityId String
    content     String     @db.Text
    createdAt   DateTime   @default(now())
    user        User?      @relation(fields: [userId], references: [id])
    community   Community? @relation(fields: [communityId], references: [id])

    @@id([userId, communityId])
    @@index([userId])
    @@index([communityId])
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]

    // Non-Next Auth
    ratings Rating[]
    reviews Review[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Example {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Log {
    id          Int      @id @default(autoincrement())
    description String
    details     Json
    createdAt   DateTime @default(now())
    environment String
}
